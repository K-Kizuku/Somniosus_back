// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: twitter/like/like.proto

package twitter

import (
	context "context"
	rpc "github.com/K-Kizuku/Somniosus_back/proto.pb/twitter/like/rpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_twitter_like_like_proto protoreflect.FileDescriptor

var file_twitter_like_like_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x6b, 0x65, 0x2f, 0x6c,
	0x69, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x2e, 0x6c, 0x69, 0x6b, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x6c, 0x69,
	0x6b, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x69, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x32, 0xa3, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x49, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x12,
	0x23, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x69, 0x6b, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x23, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x69, 0x6b, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x2d, 0x4b, 0x69, 0x7a, 0x75, 0x6b, 0x75, 0x2f, 0x53,
	0x6f, 0x6d, 0x6e, 0x69, 0x6f, 0x73, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x62, 0x2f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_twitter_like_like_proto_goTypes = []interface{}{
	(*rpc.CreateLikeRequest)(nil), // 0: twitter.like.rpc.CreateLikeRequest
	(*rpc.DeleteLikeRequest)(nil), // 1: twitter.like.rpc.DeleteLikeRequest
	(*emptypb.Empty)(nil),         // 2: google.protobuf.Empty
}
var file_twitter_like_like_proto_depIdxs = []int32{
	0, // 0: twitter.like.LikeService.CreateLike:input_type -> twitter.like.rpc.CreateLikeRequest
	1, // 1: twitter.like.LikeService.DeleteLike:input_type -> twitter.like.rpc.DeleteLikeRequest
	2, // 2: twitter.like.LikeService.CreateLike:output_type -> google.protobuf.Empty
	2, // 3: twitter.like.LikeService.DeleteLike:output_type -> google.protobuf.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_twitter_like_like_proto_init() }
func file_twitter_like_like_proto_init() {
	if File_twitter_like_like_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_twitter_like_like_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_twitter_like_like_proto_goTypes,
		DependencyIndexes: file_twitter_like_like_proto_depIdxs,
	}.Build()
	File_twitter_like_like_proto = out.File
	file_twitter_like_like_proto_rawDesc = nil
	file_twitter_like_like_proto_goTypes = nil
	file_twitter_like_like_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LikeServiceClient is the client API for LikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LikeServiceClient interface {
	CreateLike(ctx context.Context, in *rpc.CreateLikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteLike(ctx context.Context, in *rpc.DeleteLikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type likeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeServiceClient(cc grpc.ClientConnInterface) LikeServiceClient {
	return &likeServiceClient{cc}
}

func (c *likeServiceClient) CreateLike(ctx context.Context, in *rpc.CreateLikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/twitter.like.LikeService/CreateLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) DeleteLike(ctx context.Context, in *rpc.DeleteLikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/twitter.like.LikeService/DeleteLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeServiceServer is the server API for LikeService service.
type LikeServiceServer interface {
	CreateLike(context.Context, *rpc.CreateLikeRequest) (*emptypb.Empty, error)
	DeleteLike(context.Context, *rpc.DeleteLikeRequest) (*emptypb.Empty, error)
}

// UnimplementedLikeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLikeServiceServer struct {
}

func (*UnimplementedLikeServiceServer) CreateLike(context.Context, *rpc.CreateLikeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (*UnimplementedLikeServiceServer) DeleteLike(context.Context, *rpc.DeleteLikeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}

func RegisterLikeServiceServer(s *grpc.Server, srv LikeServiceServer) {
	s.RegisterService(&_LikeService_serviceDesc, srv)
}

func _LikeService_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.CreateLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.like.LikeService/CreateLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).CreateLike(ctx, req.(*rpc.CreateLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpc.DeleteLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter.like.LikeService/DeleteLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).DeleteLike(ctx, req.(*rpc.DeleteLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LikeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twitter.like.LikeService",
	HandlerType: (*LikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLike",
			Handler:    _LikeService_CreateLike_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _LikeService_DeleteLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twitter/like/like.proto",
}
